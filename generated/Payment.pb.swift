// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Payment.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Payment transaction specific information.
/// Next field: 4
struct Payment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The amount of currency to pay, in either fiat or XRP.
  var amount: OneOf_Amount? {
    get {return _storage._amount}
    set {_uniqueStorage()._amount = newValue}
  }

  var xrpAmount: XRPAmount {
    get {
      if case .xrpAmount(let v)? = _storage._amount {return v}
      return XRPAmount()
    }
    set {_uniqueStorage()._amount = .xrpAmount(newValue)}
  }

  var fiatAmount: FiatAmount {
    get {
      if case .fiatAmount(let v)? = _storage._amount {return v}
      return FiatAmount()
    }
    set {_uniqueStorage()._amount = .fiatAmount(newValue)}
  }

  /// The destination of the payment.
  var destination: String {
    get {return _storage._destination}
    set {_uniqueStorage()._destination = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The amount of currency to pay, in either fiat or XRP.
  enum OneOf_Amount: Equatable {
    case xrpAmount(XRPAmount)
    case fiatAmount(FiatAmount)

  #if !swift(>=4.1)
    static func ==(lhs: Payment.OneOf_Amount, rhs: Payment.OneOf_Amount) -> Bool {
      switch (lhs, rhs) {
      case (.xrpAmount(let l), .xrpAmount(let r)): return l == r
      case (.fiatAmount(let l), .fiatAmount(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Payment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Payment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "XRP_amount"),
    2: .standard(proto: "fiat_amount"),
    3: .same(proto: "destination"),
  ]

  fileprivate class _StorageClass {
    var _amount: Payment.OneOf_Amount?
    var _destination: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _amount = source._amount
      _destination = source._destination
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: XRPAmount?
          if let current = _storage._amount {
            try decoder.handleConflictingOneOf()
            if case .xrpAmount(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._amount = .xrpAmount(v)}
        case 2:
          var v: FiatAmount?
          if let current = _storage._amount {
            try decoder.handleConflictingOneOf()
            if case .fiatAmount(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._amount = .fiatAmount(v)}
        case 3: try decoder.decodeSingularStringField(value: &_storage._destination)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._amount {
      case .xrpAmount(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .fiatAmount(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
      if !_storage._destination.isEmpty {
        try visitor.visitSingularStringField(value: _storage._destination, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Payment, rhs: Payment) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._destination != rhs_storage._destination {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
